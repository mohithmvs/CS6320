//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Dec 10 11:10:05 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_A                      O     1
// RDY_put_B                      O     1
// get_res                        O    64 reg
// RDY_get_res                    O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_A_a_in                     I    64 reg
// put_B_b_in                     I    64 reg
// EN_put_A                       I     1
// EN_put_B                       I     1
// EN_get_res                     I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFPAdder64(CLK,
		   RST_N,

		   put_A_a_in,
		   EN_put_A,
		   RDY_put_A,

		   put_B_b_in,
		   EN_put_B,
		   RDY_put_B,

		   EN_get_res,
		   get_res,
		   RDY_get_res);
  input  CLK;
  input  RST_N;

  // action method put_A
  input  [63 : 0] put_A_a_in;
  input  EN_put_A;
  output RDY_put_A;

  // action method put_B
  input  [63 : 0] put_B_b_in;
  input  EN_put_B;
  output RDY_put_B;

  // actionvalue method get_res
  input  EN_get_res;
  output [63 : 0] get_res;
  output RDY_get_res;

  // signals for module outputs
  wire [63 : 0] get_res;
  wire RDY_get_res, RDY_put_A, RDY_put_B;

  // register exponent1
  reg [10 : 0] exponent1;
  wire [10 : 0] exponent1$D_IN;
  wire exponent1$EN;

  // register exponent2
  reg [10 : 0] exponent2;
  wire [10 : 0] exponent2$D_IN;
  wire exponent2$EN;

  // register exponent3
  reg [10 : 0] exponent3;
  wire [10 : 0] exponent3$D_IN;
  wire exponent3$EN;

  // register exponent4
  reg [10 : 0] exponent4;
  wire [10 : 0] exponent4$D_IN;
  wire exponent4$EN;

  // register exponent_1_64
  reg [10 : 0] exponent_1_64;
  wire [10 : 0] exponent_1_64$D_IN;
  wire exponent_1_64$EN;

  // register exponent_2_64
  reg [10 : 0] exponent_2_64;
  wire [10 : 0] exponent_2_64$D_IN;
  wire exponent_2_64$EN;

  // register exponent_max_64
  reg [10 : 0] exponent_max_64;
  wire [10 : 0] exponent_max_64$D_IN;
  wire exponent_max_64$EN;

  // register final_sum_64
  reg [63 : 0] final_sum_64;
  wire [63 : 0] final_sum_64$D_IN;
  wire final_sum_64$EN;

  // register got_A
  reg got_A;
  wire got_A$D_IN, got_A$EN;

  // register got_B
  reg got_B;
  wire got_B$D_IN, got_B$EN;

  // register got_final
  reg got_final;
  wire got_final$D_IN, got_final$EN;

  // register input_1_64
  reg [63 : 0] input_1_64;
  wire [63 : 0] input_1_64$D_IN;
  wire input_1_64$EN;

  // register input_2_64
  reg [63 : 0] input_2_64;
  wire [63 : 0] input_2_64$D_IN;
  wire input_2_64$EN;

  // register mantissa1_1
  reg [52 : 0] mantissa1_1;
  wire [52 : 0] mantissa1_1$D_IN;
  wire mantissa1_1$EN;

  // register mantissa2_1
  reg [52 : 0] mantissa2_1;
  wire [52 : 0] mantissa2_1$D_IN;
  wire mantissa2_1$EN;

  // register mantissa_1_53_64
  reg [52 : 0] mantissa_1_53_64;
  wire [52 : 0] mantissa_1_53_64$D_IN;
  wire mantissa_1_53_64$EN;

  // register mantissa_1_64
  reg [51 : 0] mantissa_1_64;
  wire [51 : 0] mantissa_1_64$D_IN;
  wire mantissa_1_64$EN;

  // register mantissa_2_53_64
  reg [52 : 0] mantissa_2_53_64;
  wire [52 : 0] mantissa_2_53_64$D_IN;
  wire mantissa_2_53_64$EN;

  // register mantissa_2_64
  reg [51 : 0] mantissa_2_64;
  wire [51 : 0] mantissa_2_64$D_IN;
  wire mantissa_2_64$EN;

  // register sign1_1
  reg sign1_1;
  wire sign1_1$D_IN, sign1_1$EN;

  // register sign1_2
  reg sign1_2;
  wire sign1_2$D_IN, sign1_2$EN;

  // register sign2_1
  reg sign2_1;
  wire sign2_1$D_IN, sign2_1$EN;

  // register sign2_2
  reg sign2_2;
  wire sign2_2$D_IN, sign2_2$EN;

  // register sign_1_64
  reg sign_1_64;
  wire sign_1_64$D_IN, sign_1_64$EN;

  // register sign_2_64
  reg sign_2_64;
  wire sign_2_64$D_IN, sign_2_64$EN;

  // register sign_64
  reg sign_64;
  wire sign_64$D_IN, sign_64$EN;

  // register sign_64_2
  reg sign_64_2;
  wire sign_64_2$D_IN, sign_64_2$EN;

  // register sign_64_3
  reg sign_64_3;
  wire sign_64_3$D_IN, sign_64_3$EN;

  // register sign_64_4
  reg sign_64_4;
  wire sign_64_4$D_IN, sign_64_4$EN;

  // register stage1
  reg stage1;
  wire stage1$D_IN, stage1$EN;

  // register stage2
  reg stage2;
  wire stage2$D_IN, stage2$EN;

  // register stage3
  reg stage3;
  wire stage3$D_IN, stage3$EN;

  // register stage4
  reg stage4;
  wire stage4$D_IN, stage4$EN;

  // register sum_64
  reg [53 : 0] sum_64;
  wire [53 : 0] sum_64$D_IN;
  wire sum_64$EN;

  // register sum_64_2
  reg [53 : 0] sum_64_2;
  wire [53 : 0] sum_64_2$D_IN;
  wire sum_64_2$EN;

  // register sum_64_3
  reg [51 : 0] sum_64_3;
  wire [51 : 0] sum_64_3$D_IN;
  wire sum_64_3$EN;

  // register sum_64_4
  reg [53 : 0] sum_64_4;
  wire [53 : 0] sum_64_4$D_IN;
  wire sum_64_4$EN;

  // remaining internal signals
  wire [63 : 0] x__h5324;
  wire [53 : 0] sum_64_2_SL_IF_sum_64_2_9_BIT_0_3_AND_NOT_sum__ETC__q1,
		x__h2235,
		x__h2254,
		x__h2258,
		x__h2264,
		x__h2281,
		x__h2287,
		y__h2255,
		y__h2263,
		y__h2286;
  wire [52 : 0] x__h1658, x__h1698, x__h1727, x__h1788, x__h1791, x__h1882;
  wire [31 : 0] IF_sum_64_2_9_BIT_0_3_AND_NOT_sum_64_2_9_BIT_1_ETC___d332,
		IF_sum_64_2_9_BIT_12_6_AND_NOT_sum_64_2_9_BIT__ETC___d320,
		IF_sum_64_2_9_BIT_15_02_AND_NOT_sum_64_2_9_BIT_ETC___d317,
		IF_sum_64_2_9_BIT_18_08_AND_NOT_sum_64_2_9_BIT_ETC___d314,
		IF_sum_64_2_9_BIT_21_14_AND_NOT_sum_64_2_9_BIT_ETC___d311,
		IF_sum_64_2_9_BIT_24_20_AND_NOT_sum_64_2_9_BIT_ETC___d308,
		IF_sum_64_2_9_BIT_27_26_AND_NOT_sum_64_2_9_BIT_ETC___d305,
		IF_sum_64_2_9_BIT_30_32_AND_NOT_sum_64_2_9_BIT_ETC___d302,
		IF_sum_64_2_9_BIT_33_38_AND_NOT_sum_64_2_9_BIT_ETC___d299,
		IF_sum_64_2_9_BIT_36_44_AND_NOT_sum_64_2_9_BIT_ETC___d296,
		IF_sum_64_2_9_BIT_39_50_AND_NOT_sum_64_2_9_BIT_ETC___d293,
		IF_sum_64_2_9_BIT_3_8_AND_NOT_sum_64_2_9_BIT_4_ETC___d329,
		IF_sum_64_2_9_BIT_42_56_AND_NOT_sum_64_2_9_BIT_ETC___d290,
		IF_sum_64_2_9_BIT_45_62_AND_NOT_sum_64_2_9_BIT_ETC___d287,
		IF_sum_64_2_9_BIT_48_68_AND_NOT_sum_64_2_9_BIT_ETC___d284,
		IF_sum_64_2_9_BIT_6_4_AND_NOT_sum_64_2_9_BIT_7_ETC___d326,
		IF_sum_64_2_9_BIT_9_0_AND_NOT_sum_64_2_9_BIT_1_ETC___d323;
  wire [10 : 0] IF_sum_64_2_9_BIT_12_6_AND_NOT_sum_64_2_9_BIT__ETC___d377,
		IF_sum_64_2_9_BIT_15_02_AND_NOT_sum_64_2_9_BIT_ETC___d374,
		IF_sum_64_2_9_BIT_18_08_AND_NOT_sum_64_2_9_BIT_ETC___d371,
		IF_sum_64_2_9_BIT_21_14_AND_NOT_sum_64_2_9_BIT_ETC___d368,
		IF_sum_64_2_9_BIT_24_20_AND_NOT_sum_64_2_9_BIT_ETC___d365,
		IF_sum_64_2_9_BIT_27_26_AND_NOT_sum_64_2_9_BIT_ETC___d362,
		IF_sum_64_2_9_BIT_30_32_AND_NOT_sum_64_2_9_BIT_ETC___d359,
		IF_sum_64_2_9_BIT_33_38_AND_NOT_sum_64_2_9_BIT_ETC___d356,
		IF_sum_64_2_9_BIT_36_44_AND_NOT_sum_64_2_9_BIT_ETC___d353,
		IF_sum_64_2_9_BIT_39_50_AND_NOT_sum_64_2_9_BIT_ETC___d350,
		IF_sum_64_2_9_BIT_3_8_AND_NOT_sum_64_2_9_BIT_4_ETC___d386,
		IF_sum_64_2_9_BIT_42_56_AND_NOT_sum_64_2_9_BIT_ETC___d347,
		IF_sum_64_2_9_BIT_45_62_AND_NOT_sum_64_2_9_BIT_ETC___d344,
		IF_sum_64_2_9_BIT_48_68_AND_NOT_sum_64_2_9_BIT_ETC___d341,
		IF_sum_64_2_9_BIT_6_4_AND_NOT_sum_64_2_9_BIT_7_ETC___d383,
		IF_sum_64_2_9_BIT_9_0_AND_NOT_sum_64_2_9_BIT_1_ETC___d380,
		shif__h5094,
		x__h5085,
		x__h5095,
		y__h1728,
		y__h1902;
  wire NOT_sum_64_2_9_BIT_10_2_3_AND_NOT_sum_64_2_9_B_ETC___d219,
       NOT_sum_64_2_9_BIT_13_8_9_AND_NOT_sum_64_2_9_B_ETC___d216,
       NOT_sum_64_2_9_BIT_16_04_05_AND_NOT_sum_64_2_9_ETC___d213,
       NOT_sum_64_2_9_BIT_19_10_11_AND_NOT_sum_64_2_9_ETC___d210,
       NOT_sum_64_2_9_BIT_1_4_5_AND_NOT_sum_64_2_9_BI_ETC___d228,
       NOT_sum_64_2_9_BIT_22_16_17_AND_NOT_sum_64_2_9_ETC___d207,
       NOT_sum_64_2_9_BIT_25_22_23_AND_NOT_sum_64_2_9_ETC___d204,
       NOT_sum_64_2_9_BIT_28_28_29_AND_NOT_sum_64_2_9_ETC___d201,
       NOT_sum_64_2_9_BIT_31_34_35_AND_NOT_sum_64_2_9_ETC___d198,
       NOT_sum_64_2_9_BIT_34_40_41_AND_NOT_sum_64_2_9_ETC___d195,
       NOT_sum_64_2_9_BIT_37_46_47_AND_NOT_sum_64_2_9_ETC___d192,
       NOT_sum_64_2_9_BIT_40_52_53_AND_NOT_sum_64_2_9_ETC___d189,
       NOT_sum_64_2_9_BIT_43_58_59_AND_NOT_sum_64_2_9_ETC___d186,
       NOT_sum_64_2_9_BIT_46_64_65_AND_NOT_sum_64_2_9_ETC___d183,
       NOT_sum_64_2_9_BIT_49_70_71_AND_NOT_sum_64_2_9_ETC___d180,
       NOT_sum_64_2_9_BIT_4_0_1_AND_NOT_sum_64_2_9_BI_ETC___d225,
       NOT_sum_64_2_9_BIT_7_6_7_AND_NOT_sum_64_2_9_BI_ETC___d222,
       exponent_1_64_2_ULT_exponent_2_64_3___d14,
       mantissa1_1_4_ULE_mantissa2_1_5___d46,
       sign1_1_1_EQ_sign2_1_2___d43,
       sum_64_2_9_BIT_10_2_AND_NOT_sum_64_2_9_BIT_11__ETC___d239,
       sum_64_2_9_BIT_13_8_AND_NOT_sum_64_2_9_BIT_14__ETC___d242,
       sum_64_2_9_BIT_16_04_AND_NOT_sum_64_2_9_BIT_17_ETC___d245,
       sum_64_2_9_BIT_19_10_AND_NOT_sum_64_2_9_BIT_20_ETC___d248,
       sum_64_2_9_BIT_1_4_AND_NOT_sum_64_2_9_BIT_2_6__ETC___d230,
       sum_64_2_9_BIT_22_16_AND_NOT_sum_64_2_9_BIT_23_ETC___d251,
       sum_64_2_9_BIT_25_22_AND_NOT_sum_64_2_9_BIT_26_ETC___d254,
       sum_64_2_9_BIT_28_28_AND_NOT_sum_64_2_9_BIT_29_ETC___d257,
       sum_64_2_9_BIT_31_34_AND_NOT_sum_64_2_9_BIT_32_ETC___d260,
       sum_64_2_9_BIT_34_40_AND_NOT_sum_64_2_9_BIT_35_ETC___d263,
       sum_64_2_9_BIT_37_46_AND_NOT_sum_64_2_9_BIT_38_ETC___d266,
       sum_64_2_9_BIT_40_52_AND_NOT_sum_64_2_9_BIT_41_ETC___d269,
       sum_64_2_9_BIT_43_58_AND_NOT_sum_64_2_9_BIT_44_ETC___d272,
       sum_64_2_9_BIT_46_64_AND_NOT_sum_64_2_9_BIT_47_ETC___d275,
       sum_64_2_9_BIT_49_70_AND_NOT_sum_64_2_9_BIT_50_ETC___d278,
       sum_64_2_9_BIT_4_0_AND_NOT_sum_64_2_9_BIT_5_2__ETC___d233,
       sum_64_2_9_BIT_7_6_AND_NOT_sum_64_2_9_BIT_8_8__ETC___d236;

  // action method put_A
  assign RDY_put_A = !got_A ;

  // action method put_B
  assign RDY_put_B = !got_B ;

  // actionvalue method get_res
  assign get_res = final_sum_64 ;
  assign RDY_get_res = got_final && got_A && got_B ;

  // register exponent1
  assign exponent1$D_IN = exponent_max_64 ;
  assign exponent1$EN = got_A && got_B ;

  // register exponent2
  assign exponent2$D_IN = exponent1 ;
  assign exponent2$EN = stage1 ;

  // register exponent3
  assign exponent3$D_IN =
	     (sign1_2 == sign2_2 && sum_64_2[53]) ? x__h5085 : x__h5095 ;
  assign exponent3$EN = stage2 ;

  // register exponent4
  assign exponent4$D_IN = 11'h0 ;
  assign exponent4$EN = 1'b0 ;

  // register exponent_1_64
  assign exponent_1_64$D_IN = input_1_64[62:52] ;
  assign exponent_1_64$EN = got_A && got_B ;

  // register exponent_2_64
  assign exponent_2_64$D_IN = input_2_64[62:52] ;
  assign exponent_2_64$EN = got_A && got_B ;

  // register exponent_max_64
  assign exponent_max_64$D_IN =
	     exponent_1_64_2_ULT_exponent_2_64_3___d14 ?
	       exponent_2_64 :
	       exponent_1_64 ;
  assign exponent_max_64$EN = got_A && got_B ;

  // register final_sum_64
  assign final_sum_64$D_IN =
	     (input_1_64 == 64'b0) ?
	       input_2_64 :
	       ((input_2_64 == 64'b0) ? input_1_64 : x__h5324) ;
  assign final_sum_64$EN = stage3 ;

  // register got_A
  assign got_A$D_IN = 1'd1 ;
  assign got_A$EN = EN_put_A ;

  // register got_B
  assign got_B$D_IN = 1'd1 ;
  assign got_B$EN = EN_put_B ;

  // register got_final
  assign got_final$D_IN = final_sum_64 != 64'b0 ;
  assign got_final$EN = stage3 ;

  // register input_1_64
  assign input_1_64$D_IN = put_A_a_in ;
  assign input_1_64$EN = EN_put_A ;

  // register input_2_64
  assign input_2_64$D_IN = put_B_b_in ;
  assign input_2_64$EN = EN_put_B ;

  // register mantissa1_1
  assign mantissa1_1$D_IN = mantissa_1_53_64 ;
  assign mantissa1_1$EN = got_A && got_B ;

  // register mantissa2_1
  assign mantissa2_1$D_IN = mantissa_2_53_64 ;
  assign mantissa2_1$EN = got_A && got_B ;

  // register mantissa_1_53_64
  assign mantissa_1_53_64$D_IN =
	     exponent_1_64_2_ULT_exponent_2_64_3___d14 ?
	       ((mantissa_1_64 == 52'b0) ? x__h1788 : x__h1882) :
	       { mantissa_2_64 != 52'b0, mantissa_1_64 } ;
  assign mantissa_1_53_64$EN = got_A && got_B ;

  // register mantissa_1_64
  assign mantissa_1_64$D_IN = input_1_64[51:0] ;
  assign mantissa_1_64$EN = got_A && got_B ;

  // register mantissa_2_53_64
  assign mantissa_2_53_64$D_IN =
	     exponent_1_64_2_ULT_exponent_2_64_3___d14 ?
	       { mantissa_2_64 != 52'b0, mantissa_2_64 } :
	       ((mantissa_2_64 == 52'b0) ? x__h1658 : x__h1698) ;
  assign mantissa_2_53_64$EN = got_A && got_B ;

  // register mantissa_2_64
  assign mantissa_2_64$D_IN = input_2_64[51:0] ;
  assign mantissa_2_64$EN = got_A && got_B ;

  // register sign1_1
  assign sign1_1$D_IN = sign_1_64 ;
  assign sign1_1$EN = got_A && got_B ;

  // register sign1_2
  assign sign1_2$D_IN = sign1_1 ;
  assign sign1_2$EN = stage1 ;

  // register sign2_1
  assign sign2_1$D_IN = sign_2_64 ;
  assign sign2_1$EN = got_A && got_B ;

  // register sign2_2
  assign sign2_2$D_IN = sign2_1 ;
  assign sign2_2$EN = stage1 ;

  // register sign_1_64
  assign sign_1_64$D_IN = input_1_64[63] ;
  assign sign_1_64$EN = got_A && got_B ;

  // register sign_2_64
  assign sign_2_64$D_IN = input_2_64[63] ;
  assign sign_2_64$EN = got_A && got_B ;

  // register sign_64
  assign sign_64$D_IN =
	     sign1_1_1_EQ_sign2_1_2___d43 ?
	       sign1_1 :
	       (mantissa1_1_4_ULE_mantissa2_1_5___d46 ? sign2_1 : sign1_1) ;
  assign sign_64$EN = stage1 ;

  // register sign_64_2
  assign sign_64_2$D_IN = sign_64 ;
  assign sign_64_2$EN = stage1 ;

  // register sign_64_3
  assign sign_64_3$D_IN = sign_64_2 ;
  assign sign_64_3$EN = stage2 ;

  // register sign_64_4
  assign sign_64_4$D_IN = 1'b0 ;
  assign sign_64_4$EN = 1'b0 ;

  // register stage1
  assign stage1$D_IN = 1'd1 ;
  assign stage1$EN = got_A && got_B ;

  // register stage2
  assign stage2$D_IN = 1'd1 ;
  assign stage2$EN = stage1 ;

  // register stage3
  assign stage3$D_IN = 1'd1 ;
  assign stage3$EN = stage2 ;

  // register stage4
  assign stage4$D_IN = 1'b0 ;
  assign stage4$EN = 1'b0 ;

  // register sum_64
  assign sum_64$D_IN =
	     sign1_1_1_EQ_sign2_1_2___d43 ?
	       x__h2235 :
	       (mantissa1_1_4_ULE_mantissa2_1_5___d46 ? x__h2281 : x__h2258) ;
  assign sum_64$EN = stage1 ;

  // register sum_64_2
  assign sum_64_2$D_IN = sum_64 ;
  assign sum_64_2$EN = stage1 ;

  // register sum_64_3
  assign sum_64_3$D_IN =
	     (sign1_2 == sign2_2 && sum_64_2[53]) ?
	       sum_64_2[52:1] :
	       sum_64_2_SL_IF_sum_64_2_9_BIT_0_3_AND_NOT_sum__ETC__q1[51:0] ;
  assign sum_64_3$EN = stage2 ;

  // register sum_64_4
  assign sum_64_4$D_IN = 54'h0 ;
  assign sum_64_4$EN = 1'b0 ;

  // remaining internal signals
  assign IF_sum_64_2_9_BIT_0_3_AND_NOT_sum_64_2_9_BIT_1_ETC___d332 =
	     (sum_64_2[0] &&
	      NOT_sum_64_2_9_BIT_1_4_5_AND_NOT_sum_64_2_9_BI_ETC___d228) ?
	       32'd52 :
	       (sum_64_2_9_BIT_1_4_AND_NOT_sum_64_2_9_BIT_2_6__ETC___d230 ?
		  32'd51 :
		  ((sum_64_2[2] && !sum_64_2[3] &&
		    NOT_sum_64_2_9_BIT_4_0_1_AND_NOT_sum_64_2_9_BI_ETC___d225) ?
		     32'd50 :
		     IF_sum_64_2_9_BIT_3_8_AND_NOT_sum_64_2_9_BIT_4_ETC___d329)) ;
  assign IF_sum_64_2_9_BIT_12_6_AND_NOT_sum_64_2_9_BIT__ETC___d320 =
	     (sum_64_2[12] &&
	      NOT_sum_64_2_9_BIT_13_8_9_AND_NOT_sum_64_2_9_B_ETC___d216) ?
	       32'd40 :
	       (sum_64_2_9_BIT_13_8_AND_NOT_sum_64_2_9_BIT_14__ETC___d242 ?
		  32'd39 :
		  ((sum_64_2[14] && !sum_64_2[15] &&
		    NOT_sum_64_2_9_BIT_16_04_05_AND_NOT_sum_64_2_9_ETC___d213) ?
		     32'd38 :
		     IF_sum_64_2_9_BIT_15_02_AND_NOT_sum_64_2_9_BIT_ETC___d317)) ;
  assign IF_sum_64_2_9_BIT_12_6_AND_NOT_sum_64_2_9_BIT__ETC___d377 =
	     (sum_64_2[12] &&
	      NOT_sum_64_2_9_BIT_13_8_9_AND_NOT_sum_64_2_9_B_ETC___d216) ?
	       11'd40 :
	       (sum_64_2_9_BIT_13_8_AND_NOT_sum_64_2_9_BIT_14__ETC___d242 ?
		  11'd39 :
		  ((sum_64_2[14] && !sum_64_2[15] &&
		    NOT_sum_64_2_9_BIT_16_04_05_AND_NOT_sum_64_2_9_ETC___d213) ?
		     11'd38 :
		     IF_sum_64_2_9_BIT_15_02_AND_NOT_sum_64_2_9_BIT_ETC___d374)) ;
  assign IF_sum_64_2_9_BIT_15_02_AND_NOT_sum_64_2_9_BIT_ETC___d317 =
	     (sum_64_2[15] &&
	      NOT_sum_64_2_9_BIT_16_04_05_AND_NOT_sum_64_2_9_ETC___d213) ?
	       32'd37 :
	       (sum_64_2_9_BIT_16_04_AND_NOT_sum_64_2_9_BIT_17_ETC___d245 ?
		  32'd36 :
		  ((sum_64_2[17] && !sum_64_2[18] &&
		    NOT_sum_64_2_9_BIT_19_10_11_AND_NOT_sum_64_2_9_ETC___d210) ?
		     32'd35 :
		     IF_sum_64_2_9_BIT_18_08_AND_NOT_sum_64_2_9_BIT_ETC___d314)) ;
  assign IF_sum_64_2_9_BIT_15_02_AND_NOT_sum_64_2_9_BIT_ETC___d374 =
	     (sum_64_2[15] &&
	      NOT_sum_64_2_9_BIT_16_04_05_AND_NOT_sum_64_2_9_ETC___d213) ?
	       11'd37 :
	       (sum_64_2_9_BIT_16_04_AND_NOT_sum_64_2_9_BIT_17_ETC___d245 ?
		  11'd36 :
		  ((sum_64_2[17] && !sum_64_2[18] &&
		    NOT_sum_64_2_9_BIT_19_10_11_AND_NOT_sum_64_2_9_ETC___d210) ?
		     11'd35 :
		     IF_sum_64_2_9_BIT_18_08_AND_NOT_sum_64_2_9_BIT_ETC___d371)) ;
  assign IF_sum_64_2_9_BIT_18_08_AND_NOT_sum_64_2_9_BIT_ETC___d314 =
	     (sum_64_2[18] &&
	      NOT_sum_64_2_9_BIT_19_10_11_AND_NOT_sum_64_2_9_ETC___d210) ?
	       32'd34 :
	       (sum_64_2_9_BIT_19_10_AND_NOT_sum_64_2_9_BIT_20_ETC___d248 ?
		  32'd33 :
		  ((sum_64_2[20] && !sum_64_2[21] &&
		    NOT_sum_64_2_9_BIT_22_16_17_AND_NOT_sum_64_2_9_ETC___d207) ?
		     32'd32 :
		     IF_sum_64_2_9_BIT_21_14_AND_NOT_sum_64_2_9_BIT_ETC___d311)) ;
  assign IF_sum_64_2_9_BIT_18_08_AND_NOT_sum_64_2_9_BIT_ETC___d371 =
	     (sum_64_2[18] &&
	      NOT_sum_64_2_9_BIT_19_10_11_AND_NOT_sum_64_2_9_ETC___d210) ?
	       11'd34 :
	       (sum_64_2_9_BIT_19_10_AND_NOT_sum_64_2_9_BIT_20_ETC___d248 ?
		  11'd33 :
		  ((sum_64_2[20] && !sum_64_2[21] &&
		    NOT_sum_64_2_9_BIT_22_16_17_AND_NOT_sum_64_2_9_ETC___d207) ?
		     11'd32 :
		     IF_sum_64_2_9_BIT_21_14_AND_NOT_sum_64_2_9_BIT_ETC___d368)) ;
  assign IF_sum_64_2_9_BIT_21_14_AND_NOT_sum_64_2_9_BIT_ETC___d311 =
	     (sum_64_2[21] &&
	      NOT_sum_64_2_9_BIT_22_16_17_AND_NOT_sum_64_2_9_ETC___d207) ?
	       32'd31 :
	       (sum_64_2_9_BIT_22_16_AND_NOT_sum_64_2_9_BIT_23_ETC___d251 ?
		  32'd30 :
		  ((sum_64_2[23] && !sum_64_2[24] &&
		    NOT_sum_64_2_9_BIT_25_22_23_AND_NOT_sum_64_2_9_ETC___d204) ?
		     32'd29 :
		     IF_sum_64_2_9_BIT_24_20_AND_NOT_sum_64_2_9_BIT_ETC___d308)) ;
  assign IF_sum_64_2_9_BIT_21_14_AND_NOT_sum_64_2_9_BIT_ETC___d368 =
	     (sum_64_2[21] &&
	      NOT_sum_64_2_9_BIT_22_16_17_AND_NOT_sum_64_2_9_ETC___d207) ?
	       11'd31 :
	       (sum_64_2_9_BIT_22_16_AND_NOT_sum_64_2_9_BIT_23_ETC___d251 ?
		  11'd30 :
		  ((sum_64_2[23] && !sum_64_2[24] &&
		    NOT_sum_64_2_9_BIT_25_22_23_AND_NOT_sum_64_2_9_ETC___d204) ?
		     11'd29 :
		     IF_sum_64_2_9_BIT_24_20_AND_NOT_sum_64_2_9_BIT_ETC___d365)) ;
  assign IF_sum_64_2_9_BIT_24_20_AND_NOT_sum_64_2_9_BIT_ETC___d308 =
	     (sum_64_2[24] &&
	      NOT_sum_64_2_9_BIT_25_22_23_AND_NOT_sum_64_2_9_ETC___d204) ?
	       32'd28 :
	       (sum_64_2_9_BIT_25_22_AND_NOT_sum_64_2_9_BIT_26_ETC___d254 ?
		  32'd27 :
		  ((sum_64_2[26] && !sum_64_2[27] &&
		    NOT_sum_64_2_9_BIT_28_28_29_AND_NOT_sum_64_2_9_ETC___d201) ?
		     32'd26 :
		     IF_sum_64_2_9_BIT_27_26_AND_NOT_sum_64_2_9_BIT_ETC___d305)) ;
  assign IF_sum_64_2_9_BIT_24_20_AND_NOT_sum_64_2_9_BIT_ETC___d365 =
	     (sum_64_2[24] &&
	      NOT_sum_64_2_9_BIT_25_22_23_AND_NOT_sum_64_2_9_ETC___d204) ?
	       11'd28 :
	       (sum_64_2_9_BIT_25_22_AND_NOT_sum_64_2_9_BIT_26_ETC___d254 ?
		  11'd27 :
		  ((sum_64_2[26] && !sum_64_2[27] &&
		    NOT_sum_64_2_9_BIT_28_28_29_AND_NOT_sum_64_2_9_ETC___d201) ?
		     11'd26 :
		     IF_sum_64_2_9_BIT_27_26_AND_NOT_sum_64_2_9_BIT_ETC___d362)) ;
  assign IF_sum_64_2_9_BIT_27_26_AND_NOT_sum_64_2_9_BIT_ETC___d305 =
	     (sum_64_2[27] &&
	      NOT_sum_64_2_9_BIT_28_28_29_AND_NOT_sum_64_2_9_ETC___d201) ?
	       32'd25 :
	       (sum_64_2_9_BIT_28_28_AND_NOT_sum_64_2_9_BIT_29_ETC___d257 ?
		  32'd24 :
		  ((sum_64_2[29] && !sum_64_2[30] &&
		    NOT_sum_64_2_9_BIT_31_34_35_AND_NOT_sum_64_2_9_ETC___d198) ?
		     32'd23 :
		     IF_sum_64_2_9_BIT_30_32_AND_NOT_sum_64_2_9_BIT_ETC___d302)) ;
  assign IF_sum_64_2_9_BIT_27_26_AND_NOT_sum_64_2_9_BIT_ETC___d362 =
	     (sum_64_2[27] &&
	      NOT_sum_64_2_9_BIT_28_28_29_AND_NOT_sum_64_2_9_ETC___d201) ?
	       11'd25 :
	       (sum_64_2_9_BIT_28_28_AND_NOT_sum_64_2_9_BIT_29_ETC___d257 ?
		  11'd24 :
		  ((sum_64_2[29] && !sum_64_2[30] &&
		    NOT_sum_64_2_9_BIT_31_34_35_AND_NOT_sum_64_2_9_ETC___d198) ?
		     11'd23 :
		     IF_sum_64_2_9_BIT_30_32_AND_NOT_sum_64_2_9_BIT_ETC___d359)) ;
  assign IF_sum_64_2_9_BIT_30_32_AND_NOT_sum_64_2_9_BIT_ETC___d302 =
	     (sum_64_2[30] &&
	      NOT_sum_64_2_9_BIT_31_34_35_AND_NOT_sum_64_2_9_ETC___d198) ?
	       32'd22 :
	       (sum_64_2_9_BIT_31_34_AND_NOT_sum_64_2_9_BIT_32_ETC___d260 ?
		  32'd21 :
		  ((sum_64_2[32] && !sum_64_2[33] &&
		    NOT_sum_64_2_9_BIT_34_40_41_AND_NOT_sum_64_2_9_ETC___d195) ?
		     32'd20 :
		     IF_sum_64_2_9_BIT_33_38_AND_NOT_sum_64_2_9_BIT_ETC___d299)) ;
  assign IF_sum_64_2_9_BIT_30_32_AND_NOT_sum_64_2_9_BIT_ETC___d359 =
	     (sum_64_2[30] &&
	      NOT_sum_64_2_9_BIT_31_34_35_AND_NOT_sum_64_2_9_ETC___d198) ?
	       11'd22 :
	       (sum_64_2_9_BIT_31_34_AND_NOT_sum_64_2_9_BIT_32_ETC___d260 ?
		  11'd21 :
		  ((sum_64_2[32] && !sum_64_2[33] &&
		    NOT_sum_64_2_9_BIT_34_40_41_AND_NOT_sum_64_2_9_ETC___d195) ?
		     11'd20 :
		     IF_sum_64_2_9_BIT_33_38_AND_NOT_sum_64_2_9_BIT_ETC___d356)) ;
  assign IF_sum_64_2_9_BIT_33_38_AND_NOT_sum_64_2_9_BIT_ETC___d299 =
	     (sum_64_2[33] &&
	      NOT_sum_64_2_9_BIT_34_40_41_AND_NOT_sum_64_2_9_ETC___d195) ?
	       32'd19 :
	       (sum_64_2_9_BIT_34_40_AND_NOT_sum_64_2_9_BIT_35_ETC___d263 ?
		  32'd18 :
		  ((sum_64_2[35] && !sum_64_2[36] &&
		    NOT_sum_64_2_9_BIT_37_46_47_AND_NOT_sum_64_2_9_ETC___d192) ?
		     32'd17 :
		     IF_sum_64_2_9_BIT_36_44_AND_NOT_sum_64_2_9_BIT_ETC___d296)) ;
  assign IF_sum_64_2_9_BIT_33_38_AND_NOT_sum_64_2_9_BIT_ETC___d356 =
	     (sum_64_2[33] &&
	      NOT_sum_64_2_9_BIT_34_40_41_AND_NOT_sum_64_2_9_ETC___d195) ?
	       11'd19 :
	       (sum_64_2_9_BIT_34_40_AND_NOT_sum_64_2_9_BIT_35_ETC___d263 ?
		  11'd18 :
		  ((sum_64_2[35] && !sum_64_2[36] &&
		    NOT_sum_64_2_9_BIT_37_46_47_AND_NOT_sum_64_2_9_ETC___d192) ?
		     11'd17 :
		     IF_sum_64_2_9_BIT_36_44_AND_NOT_sum_64_2_9_BIT_ETC___d353)) ;
  assign IF_sum_64_2_9_BIT_36_44_AND_NOT_sum_64_2_9_BIT_ETC___d296 =
	     (sum_64_2[36] &&
	      NOT_sum_64_2_9_BIT_37_46_47_AND_NOT_sum_64_2_9_ETC___d192) ?
	       32'd16 :
	       (sum_64_2_9_BIT_37_46_AND_NOT_sum_64_2_9_BIT_38_ETC___d266 ?
		  32'd15 :
		  ((sum_64_2[38] && !sum_64_2[39] &&
		    NOT_sum_64_2_9_BIT_40_52_53_AND_NOT_sum_64_2_9_ETC___d189) ?
		     32'd14 :
		     IF_sum_64_2_9_BIT_39_50_AND_NOT_sum_64_2_9_BIT_ETC___d293)) ;
  assign IF_sum_64_2_9_BIT_36_44_AND_NOT_sum_64_2_9_BIT_ETC___d353 =
	     (sum_64_2[36] &&
	      NOT_sum_64_2_9_BIT_37_46_47_AND_NOT_sum_64_2_9_ETC___d192) ?
	       11'd16 :
	       (sum_64_2_9_BIT_37_46_AND_NOT_sum_64_2_9_BIT_38_ETC___d266 ?
		  11'd15 :
		  ((sum_64_2[38] && !sum_64_2[39] &&
		    NOT_sum_64_2_9_BIT_40_52_53_AND_NOT_sum_64_2_9_ETC___d189) ?
		     11'd14 :
		     IF_sum_64_2_9_BIT_39_50_AND_NOT_sum_64_2_9_BIT_ETC___d350)) ;
  assign IF_sum_64_2_9_BIT_39_50_AND_NOT_sum_64_2_9_BIT_ETC___d293 =
	     (sum_64_2[39] &&
	      NOT_sum_64_2_9_BIT_40_52_53_AND_NOT_sum_64_2_9_ETC___d189) ?
	       32'd13 :
	       (sum_64_2_9_BIT_40_52_AND_NOT_sum_64_2_9_BIT_41_ETC___d269 ?
		  32'd12 :
		  ((sum_64_2[41] && !sum_64_2[42] &&
		    NOT_sum_64_2_9_BIT_43_58_59_AND_NOT_sum_64_2_9_ETC___d186) ?
		     32'd11 :
		     IF_sum_64_2_9_BIT_42_56_AND_NOT_sum_64_2_9_BIT_ETC___d290)) ;
  assign IF_sum_64_2_9_BIT_39_50_AND_NOT_sum_64_2_9_BIT_ETC___d350 =
	     (sum_64_2[39] &&
	      NOT_sum_64_2_9_BIT_40_52_53_AND_NOT_sum_64_2_9_ETC___d189) ?
	       11'd13 :
	       (sum_64_2_9_BIT_40_52_AND_NOT_sum_64_2_9_BIT_41_ETC___d269 ?
		  11'd12 :
		  ((sum_64_2[41] && !sum_64_2[42] &&
		    NOT_sum_64_2_9_BIT_43_58_59_AND_NOT_sum_64_2_9_ETC___d186) ?
		     11'd11 :
		     IF_sum_64_2_9_BIT_42_56_AND_NOT_sum_64_2_9_BIT_ETC___d347)) ;
  assign IF_sum_64_2_9_BIT_3_8_AND_NOT_sum_64_2_9_BIT_4_ETC___d329 =
	     (sum_64_2[3] &&
	      NOT_sum_64_2_9_BIT_4_0_1_AND_NOT_sum_64_2_9_BI_ETC___d225) ?
	       32'd49 :
	       (sum_64_2_9_BIT_4_0_AND_NOT_sum_64_2_9_BIT_5_2__ETC___d233 ?
		  32'd48 :
		  ((sum_64_2[5] && !sum_64_2[6] &&
		    NOT_sum_64_2_9_BIT_7_6_7_AND_NOT_sum_64_2_9_BI_ETC___d222) ?
		     32'd47 :
		     IF_sum_64_2_9_BIT_6_4_AND_NOT_sum_64_2_9_BIT_7_ETC___d326)) ;
  assign IF_sum_64_2_9_BIT_3_8_AND_NOT_sum_64_2_9_BIT_4_ETC___d386 =
	     (sum_64_2[3] &&
	      NOT_sum_64_2_9_BIT_4_0_1_AND_NOT_sum_64_2_9_BI_ETC___d225) ?
	       11'd49 :
	       (sum_64_2_9_BIT_4_0_AND_NOT_sum_64_2_9_BIT_5_2__ETC___d233 ?
		  11'd48 :
		  ((sum_64_2[5] && !sum_64_2[6] &&
		    NOT_sum_64_2_9_BIT_7_6_7_AND_NOT_sum_64_2_9_BI_ETC___d222) ?
		     11'd47 :
		     IF_sum_64_2_9_BIT_6_4_AND_NOT_sum_64_2_9_BIT_7_ETC___d383)) ;
  assign IF_sum_64_2_9_BIT_42_56_AND_NOT_sum_64_2_9_BIT_ETC___d290 =
	     (sum_64_2[42] &&
	      NOT_sum_64_2_9_BIT_43_58_59_AND_NOT_sum_64_2_9_ETC___d186) ?
	       32'd10 :
	       (sum_64_2_9_BIT_43_58_AND_NOT_sum_64_2_9_BIT_44_ETC___d272 ?
		  32'd9 :
		  ((sum_64_2[44] && !sum_64_2[45] &&
		    NOT_sum_64_2_9_BIT_46_64_65_AND_NOT_sum_64_2_9_ETC___d183) ?
		     32'd8 :
		     IF_sum_64_2_9_BIT_45_62_AND_NOT_sum_64_2_9_BIT_ETC___d287)) ;
  assign IF_sum_64_2_9_BIT_42_56_AND_NOT_sum_64_2_9_BIT_ETC___d347 =
	     (sum_64_2[42] &&
	      NOT_sum_64_2_9_BIT_43_58_59_AND_NOT_sum_64_2_9_ETC___d186) ?
	       11'd10 :
	       (sum_64_2_9_BIT_43_58_AND_NOT_sum_64_2_9_BIT_44_ETC___d272 ?
		  11'd9 :
		  ((sum_64_2[44] && !sum_64_2[45] &&
		    NOT_sum_64_2_9_BIT_46_64_65_AND_NOT_sum_64_2_9_ETC___d183) ?
		     11'd8 :
		     IF_sum_64_2_9_BIT_45_62_AND_NOT_sum_64_2_9_BIT_ETC___d344)) ;
  assign IF_sum_64_2_9_BIT_45_62_AND_NOT_sum_64_2_9_BIT_ETC___d287 =
	     (sum_64_2[45] &&
	      NOT_sum_64_2_9_BIT_46_64_65_AND_NOT_sum_64_2_9_ETC___d183) ?
	       32'd7 :
	       (sum_64_2_9_BIT_46_64_AND_NOT_sum_64_2_9_BIT_47_ETC___d275 ?
		  32'd6 :
		  ((sum_64_2[47] && !sum_64_2[48] &&
		    NOT_sum_64_2_9_BIT_49_70_71_AND_NOT_sum_64_2_9_ETC___d180) ?
		     32'd5 :
		     IF_sum_64_2_9_BIT_48_68_AND_NOT_sum_64_2_9_BIT_ETC___d284)) ;
  assign IF_sum_64_2_9_BIT_45_62_AND_NOT_sum_64_2_9_BIT_ETC___d344 =
	     (sum_64_2[45] &&
	      NOT_sum_64_2_9_BIT_46_64_65_AND_NOT_sum_64_2_9_ETC___d183) ?
	       11'd7 :
	       (sum_64_2_9_BIT_46_64_AND_NOT_sum_64_2_9_BIT_47_ETC___d275 ?
		  11'd6 :
		  ((sum_64_2[47] && !sum_64_2[48] &&
		    NOT_sum_64_2_9_BIT_49_70_71_AND_NOT_sum_64_2_9_ETC___d180) ?
		     11'd5 :
		     IF_sum_64_2_9_BIT_48_68_AND_NOT_sum_64_2_9_BIT_ETC___d341)) ;
  assign IF_sum_64_2_9_BIT_48_68_AND_NOT_sum_64_2_9_BIT_ETC___d284 =
	     (sum_64_2[48] &&
	      NOT_sum_64_2_9_BIT_49_70_71_AND_NOT_sum_64_2_9_ETC___d180) ?
	       32'd4 :
	       (sum_64_2_9_BIT_49_70_AND_NOT_sum_64_2_9_BIT_50_ETC___d278 ?
		  32'd3 :
		  ((sum_64_2[50] && !sum_64_2[51] && !sum_64_2[52]) ?
		     32'd2 :
		     ((sum_64_2[51] && !sum_64_2[52]) ? 32'd1 : 32'd0))) ;
  assign IF_sum_64_2_9_BIT_48_68_AND_NOT_sum_64_2_9_BIT_ETC___d341 =
	     (sum_64_2[48] &&
	      NOT_sum_64_2_9_BIT_49_70_71_AND_NOT_sum_64_2_9_ETC___d180) ?
	       11'd4 :
	       (sum_64_2_9_BIT_49_70_AND_NOT_sum_64_2_9_BIT_50_ETC___d278 ?
		  11'd3 :
		  ((sum_64_2[50] && !sum_64_2[51] && !sum_64_2[52]) ?
		     11'd2 :
		     ((sum_64_2[51] && !sum_64_2[52]) ? 11'd1 : 11'd0))) ;
  assign IF_sum_64_2_9_BIT_6_4_AND_NOT_sum_64_2_9_BIT_7_ETC___d326 =
	     (sum_64_2[6] &&
	      NOT_sum_64_2_9_BIT_7_6_7_AND_NOT_sum_64_2_9_BI_ETC___d222) ?
	       32'd46 :
	       (sum_64_2_9_BIT_7_6_AND_NOT_sum_64_2_9_BIT_8_8__ETC___d236 ?
		  32'd45 :
		  ((sum_64_2[8] && !sum_64_2[9] &&
		    NOT_sum_64_2_9_BIT_10_2_3_AND_NOT_sum_64_2_9_B_ETC___d219) ?
		     32'd44 :
		     IF_sum_64_2_9_BIT_9_0_AND_NOT_sum_64_2_9_BIT_1_ETC___d323)) ;
  assign IF_sum_64_2_9_BIT_6_4_AND_NOT_sum_64_2_9_BIT_7_ETC___d383 =
	     (sum_64_2[6] &&
	      NOT_sum_64_2_9_BIT_7_6_7_AND_NOT_sum_64_2_9_BI_ETC___d222) ?
	       11'd46 :
	       (sum_64_2_9_BIT_7_6_AND_NOT_sum_64_2_9_BIT_8_8__ETC___d236 ?
		  11'd45 :
		  ((sum_64_2[8] && !sum_64_2[9] &&
		    NOT_sum_64_2_9_BIT_10_2_3_AND_NOT_sum_64_2_9_B_ETC___d219) ?
		     11'd44 :
		     IF_sum_64_2_9_BIT_9_0_AND_NOT_sum_64_2_9_BIT_1_ETC___d380)) ;
  assign IF_sum_64_2_9_BIT_9_0_AND_NOT_sum_64_2_9_BIT_1_ETC___d323 =
	     (sum_64_2[9] &&
	      NOT_sum_64_2_9_BIT_10_2_3_AND_NOT_sum_64_2_9_B_ETC___d219) ?
	       32'd43 :
	       (sum_64_2_9_BIT_10_2_AND_NOT_sum_64_2_9_BIT_11__ETC___d239 ?
		  32'd42 :
		  ((sum_64_2[11] && !sum_64_2[12] &&
		    NOT_sum_64_2_9_BIT_13_8_9_AND_NOT_sum_64_2_9_B_ETC___d216) ?
		     32'd41 :
		     IF_sum_64_2_9_BIT_12_6_AND_NOT_sum_64_2_9_BIT__ETC___d320)) ;
  assign IF_sum_64_2_9_BIT_9_0_AND_NOT_sum_64_2_9_BIT_1_ETC___d380 =
	     (sum_64_2[9] &&
	      NOT_sum_64_2_9_BIT_10_2_3_AND_NOT_sum_64_2_9_B_ETC___d219) ?
	       11'd43 :
	       (sum_64_2_9_BIT_10_2_AND_NOT_sum_64_2_9_BIT_11__ETC___d239 ?
		  11'd42 :
		  ((sum_64_2[11] && !sum_64_2[12] &&
		    NOT_sum_64_2_9_BIT_13_8_9_AND_NOT_sum_64_2_9_B_ETC___d216) ?
		     11'd41 :
		     IF_sum_64_2_9_BIT_12_6_AND_NOT_sum_64_2_9_BIT__ETC___d377)) ;
  assign NOT_sum_64_2_9_BIT_10_2_3_AND_NOT_sum_64_2_9_B_ETC___d219 =
	     !sum_64_2[10] && !sum_64_2[11] && !sum_64_2[12] &&
	     NOT_sum_64_2_9_BIT_13_8_9_AND_NOT_sum_64_2_9_B_ETC___d216 ;
  assign NOT_sum_64_2_9_BIT_13_8_9_AND_NOT_sum_64_2_9_B_ETC___d216 =
	     !sum_64_2[13] && !sum_64_2[14] && !sum_64_2[15] &&
	     NOT_sum_64_2_9_BIT_16_04_05_AND_NOT_sum_64_2_9_ETC___d213 ;
  assign NOT_sum_64_2_9_BIT_16_04_05_AND_NOT_sum_64_2_9_ETC___d213 =
	     !sum_64_2[16] && !sum_64_2[17] && !sum_64_2[18] &&
	     NOT_sum_64_2_9_BIT_19_10_11_AND_NOT_sum_64_2_9_ETC___d210 ;
  assign NOT_sum_64_2_9_BIT_19_10_11_AND_NOT_sum_64_2_9_ETC___d210 =
	     !sum_64_2[19] && !sum_64_2[20] && !sum_64_2[21] &&
	     NOT_sum_64_2_9_BIT_22_16_17_AND_NOT_sum_64_2_9_ETC___d207 ;
  assign NOT_sum_64_2_9_BIT_1_4_5_AND_NOT_sum_64_2_9_BI_ETC___d228 =
	     !sum_64_2[1] && !sum_64_2[2] && !sum_64_2[3] &&
	     NOT_sum_64_2_9_BIT_4_0_1_AND_NOT_sum_64_2_9_BI_ETC___d225 ;
  assign NOT_sum_64_2_9_BIT_22_16_17_AND_NOT_sum_64_2_9_ETC___d207 =
	     !sum_64_2[22] && !sum_64_2[23] && !sum_64_2[24] &&
	     NOT_sum_64_2_9_BIT_25_22_23_AND_NOT_sum_64_2_9_ETC___d204 ;
  assign NOT_sum_64_2_9_BIT_25_22_23_AND_NOT_sum_64_2_9_ETC___d204 =
	     !sum_64_2[25] && !sum_64_2[26] && !sum_64_2[27] &&
	     NOT_sum_64_2_9_BIT_28_28_29_AND_NOT_sum_64_2_9_ETC___d201 ;
  assign NOT_sum_64_2_9_BIT_28_28_29_AND_NOT_sum_64_2_9_ETC___d201 =
	     !sum_64_2[28] && !sum_64_2[29] && !sum_64_2[30] &&
	     NOT_sum_64_2_9_BIT_31_34_35_AND_NOT_sum_64_2_9_ETC___d198 ;
  assign NOT_sum_64_2_9_BIT_31_34_35_AND_NOT_sum_64_2_9_ETC___d198 =
	     !sum_64_2[31] && !sum_64_2[32] && !sum_64_2[33] &&
	     NOT_sum_64_2_9_BIT_34_40_41_AND_NOT_sum_64_2_9_ETC___d195 ;
  assign NOT_sum_64_2_9_BIT_34_40_41_AND_NOT_sum_64_2_9_ETC___d195 =
	     !sum_64_2[34] && !sum_64_2[35] && !sum_64_2[36] &&
	     NOT_sum_64_2_9_BIT_37_46_47_AND_NOT_sum_64_2_9_ETC___d192 ;
  assign NOT_sum_64_2_9_BIT_37_46_47_AND_NOT_sum_64_2_9_ETC___d192 =
	     !sum_64_2[37] && !sum_64_2[38] && !sum_64_2[39] &&
	     NOT_sum_64_2_9_BIT_40_52_53_AND_NOT_sum_64_2_9_ETC___d189 ;
  assign NOT_sum_64_2_9_BIT_40_52_53_AND_NOT_sum_64_2_9_ETC___d189 =
	     !sum_64_2[40] && !sum_64_2[41] && !sum_64_2[42] &&
	     NOT_sum_64_2_9_BIT_43_58_59_AND_NOT_sum_64_2_9_ETC___d186 ;
  assign NOT_sum_64_2_9_BIT_43_58_59_AND_NOT_sum_64_2_9_ETC___d186 =
	     !sum_64_2[43] && !sum_64_2[44] && !sum_64_2[45] &&
	     NOT_sum_64_2_9_BIT_46_64_65_AND_NOT_sum_64_2_9_ETC___d183 ;
  assign NOT_sum_64_2_9_BIT_46_64_65_AND_NOT_sum_64_2_9_ETC___d183 =
	     !sum_64_2[46] && !sum_64_2[47] && !sum_64_2[48] &&
	     NOT_sum_64_2_9_BIT_49_70_71_AND_NOT_sum_64_2_9_ETC___d180 ;
  assign NOT_sum_64_2_9_BIT_49_70_71_AND_NOT_sum_64_2_9_ETC___d180 =
	     !sum_64_2[49] && !sum_64_2[50] && !sum_64_2[51] &&
	     !sum_64_2[52] ;
  assign NOT_sum_64_2_9_BIT_4_0_1_AND_NOT_sum_64_2_9_BI_ETC___d225 =
	     !sum_64_2[4] && !sum_64_2[5] && !sum_64_2[6] &&
	     NOT_sum_64_2_9_BIT_7_6_7_AND_NOT_sum_64_2_9_BI_ETC___d222 ;
  assign NOT_sum_64_2_9_BIT_7_6_7_AND_NOT_sum_64_2_9_BI_ETC___d222 =
	     !sum_64_2[7] && !sum_64_2[8] && !sum_64_2[9] &&
	     NOT_sum_64_2_9_BIT_10_2_3_AND_NOT_sum_64_2_9_B_ETC___d219 ;
  assign exponent_1_64_2_ULT_exponent_2_64_3___d14 =
	     exponent_1_64 < exponent_2_64 ;
  assign mantissa1_1_4_ULE_mantissa2_1_5___d46 = mantissa1_1 <= mantissa2_1 ;
  assign shif__h5094 =
	     (sum_64_2[0] &&
	      NOT_sum_64_2_9_BIT_1_4_5_AND_NOT_sum_64_2_9_BI_ETC___d228) ?
	       11'd52 :
	       (sum_64_2_9_BIT_1_4_AND_NOT_sum_64_2_9_BIT_2_6__ETC___d230 ?
		  11'd51 :
		  ((sum_64_2[2] && !sum_64_2[3] &&
		    NOT_sum_64_2_9_BIT_4_0_1_AND_NOT_sum_64_2_9_BI_ETC___d225) ?
		     11'd50 :
		     IF_sum_64_2_9_BIT_3_8_AND_NOT_sum_64_2_9_BIT_4_ETC___d386)) ;
  assign sign1_1_1_EQ_sign2_1_2___d43 = sign1_1 == sign2_1 ;
  assign sum_64_2_9_BIT_10_2_AND_NOT_sum_64_2_9_BIT_11__ETC___d239 =
	     sum_64_2[10] && !sum_64_2[11] && !sum_64_2[12] &&
	     NOT_sum_64_2_9_BIT_13_8_9_AND_NOT_sum_64_2_9_B_ETC___d216 ;
  assign sum_64_2_9_BIT_13_8_AND_NOT_sum_64_2_9_BIT_14__ETC___d242 =
	     sum_64_2[13] && !sum_64_2[14] && !sum_64_2[15] &&
	     NOT_sum_64_2_9_BIT_16_04_05_AND_NOT_sum_64_2_9_ETC___d213 ;
  assign sum_64_2_9_BIT_16_04_AND_NOT_sum_64_2_9_BIT_17_ETC___d245 =
	     sum_64_2[16] && !sum_64_2[17] && !sum_64_2[18] &&
	     NOT_sum_64_2_9_BIT_19_10_11_AND_NOT_sum_64_2_9_ETC___d210 ;
  assign sum_64_2_9_BIT_19_10_AND_NOT_sum_64_2_9_BIT_20_ETC___d248 =
	     sum_64_2[19] && !sum_64_2[20] && !sum_64_2[21] &&
	     NOT_sum_64_2_9_BIT_22_16_17_AND_NOT_sum_64_2_9_ETC___d207 ;
  assign sum_64_2_9_BIT_1_4_AND_NOT_sum_64_2_9_BIT_2_6__ETC___d230 =
	     sum_64_2[1] && !sum_64_2[2] && !sum_64_2[3] &&
	     NOT_sum_64_2_9_BIT_4_0_1_AND_NOT_sum_64_2_9_BI_ETC___d225 ;
  assign sum_64_2_9_BIT_22_16_AND_NOT_sum_64_2_9_BIT_23_ETC___d251 =
	     sum_64_2[22] && !sum_64_2[23] && !sum_64_2[24] &&
	     NOT_sum_64_2_9_BIT_25_22_23_AND_NOT_sum_64_2_9_ETC___d204 ;
  assign sum_64_2_9_BIT_25_22_AND_NOT_sum_64_2_9_BIT_26_ETC___d254 =
	     sum_64_2[25] && !sum_64_2[26] && !sum_64_2[27] &&
	     NOT_sum_64_2_9_BIT_28_28_29_AND_NOT_sum_64_2_9_ETC___d201 ;
  assign sum_64_2_9_BIT_28_28_AND_NOT_sum_64_2_9_BIT_29_ETC___d257 =
	     sum_64_2[28] && !sum_64_2[29] && !sum_64_2[30] &&
	     NOT_sum_64_2_9_BIT_31_34_35_AND_NOT_sum_64_2_9_ETC___d198 ;
  assign sum_64_2_9_BIT_31_34_AND_NOT_sum_64_2_9_BIT_32_ETC___d260 =
	     sum_64_2[31] && !sum_64_2[32] && !sum_64_2[33] &&
	     NOT_sum_64_2_9_BIT_34_40_41_AND_NOT_sum_64_2_9_ETC___d195 ;
  assign sum_64_2_9_BIT_34_40_AND_NOT_sum_64_2_9_BIT_35_ETC___d263 =
	     sum_64_2[34] && !sum_64_2[35] && !sum_64_2[36] &&
	     NOT_sum_64_2_9_BIT_37_46_47_AND_NOT_sum_64_2_9_ETC___d192 ;
  assign sum_64_2_9_BIT_37_46_AND_NOT_sum_64_2_9_BIT_38_ETC___d266 =
	     sum_64_2[37] && !sum_64_2[38] && !sum_64_2[39] &&
	     NOT_sum_64_2_9_BIT_40_52_53_AND_NOT_sum_64_2_9_ETC___d189 ;
  assign sum_64_2_9_BIT_40_52_AND_NOT_sum_64_2_9_BIT_41_ETC___d269 =
	     sum_64_2[40] && !sum_64_2[41] && !sum_64_2[42] &&
	     NOT_sum_64_2_9_BIT_43_58_59_AND_NOT_sum_64_2_9_ETC___d186 ;
  assign sum_64_2_9_BIT_43_58_AND_NOT_sum_64_2_9_BIT_44_ETC___d272 =
	     sum_64_2[43] && !sum_64_2[44] && !sum_64_2[45] &&
	     NOT_sum_64_2_9_BIT_46_64_65_AND_NOT_sum_64_2_9_ETC___d183 ;
  assign sum_64_2_9_BIT_46_64_AND_NOT_sum_64_2_9_BIT_47_ETC___d275 =
	     sum_64_2[46] && !sum_64_2[47] && !sum_64_2[48] &&
	     NOT_sum_64_2_9_BIT_49_70_71_AND_NOT_sum_64_2_9_ETC___d180 ;
  assign sum_64_2_9_BIT_49_70_AND_NOT_sum_64_2_9_BIT_50_ETC___d278 =
	     sum_64_2[49] && !sum_64_2[50] && !sum_64_2[51] && !sum_64_2[52] ;
  assign sum_64_2_9_BIT_4_0_AND_NOT_sum_64_2_9_BIT_5_2__ETC___d233 =
	     sum_64_2[4] && !sum_64_2[5] && !sum_64_2[6] &&
	     NOT_sum_64_2_9_BIT_7_6_7_AND_NOT_sum_64_2_9_BI_ETC___d222 ;
  assign sum_64_2_9_BIT_7_6_AND_NOT_sum_64_2_9_BIT_8_8__ETC___d236 =
	     sum_64_2[7] && !sum_64_2[8] && !sum_64_2[9] &&
	     NOT_sum_64_2_9_BIT_10_2_3_AND_NOT_sum_64_2_9_B_ETC___d219 ;
  assign sum_64_2_SL_IF_sum_64_2_9_BIT_0_3_AND_NOT_sum__ETC__q1 =
	     sum_64_2 <<
	     IF_sum_64_2_9_BIT_0_3_AND_NOT_sum_64_2_9_BIT_1_ETC___d332 ;
  assign x__h1658 = { 1'b0, mantissa_2_64 } ;
  assign x__h1698 = x__h1727 >> y__h1728 ;
  assign x__h1727 = { 1'b1, mantissa_2_64 } ;
  assign x__h1788 = { 1'b0, mantissa_1_64 } ;
  assign x__h1791 = { 1'b1, mantissa_1_64 } ;
  assign x__h1882 = x__h1791 >> y__h1902 ;
  assign x__h2235 = x__h2254 + y__h2255 ;
  assign x__h2254 = { 1'b0, mantissa1_1 } ;
  assign x__h2258 = x__h2254 + y__h2263 ;
  assign x__h2264 = { 1'd1, ~mantissa2_1 } ;
  assign x__h2281 = y__h2255 + y__h2286 ;
  assign x__h2287 = { 1'd1, ~mantissa1_1 } ;
  assign x__h5085 = exponent2 + 11'b00000000001 ;
  assign x__h5095 = exponent2 - shif__h5094 ;
  assign x__h5324 = { sign_64_3, exponent3, sum_64_3 } ;
  assign y__h1728 = exponent_1_64 - exponent_2_64 ;
  assign y__h1902 = exponent_2_64 - exponent_1_64 ;
  assign y__h2255 = { 1'b0, mantissa2_1 } ;
  assign y__h2263 =
	     x__h2264 +
	     54'b000000000000000000000000000000000000000000000000000001 ;
  assign y__h2286 =
	     x__h2287 +
	     54'b000000000000000000000000000000000000000000000000000001 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        exponent1 <= `BSV_ASSIGNMENT_DELAY 11'd0;
	exponent2 <= `BSV_ASSIGNMENT_DELAY 11'd0;
	exponent3 <= `BSV_ASSIGNMENT_DELAY 11'd0;
	exponent4 <= `BSV_ASSIGNMENT_DELAY 11'd0;
	exponent_1_64 <= `BSV_ASSIGNMENT_DELAY 11'd0;
	exponent_2_64 <= `BSV_ASSIGNMENT_DELAY 11'd0;
	exponent_max_64 <= `BSV_ASSIGNMENT_DELAY 11'd0;
	final_sum_64 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_final <= `BSV_ASSIGNMENT_DELAY 1'd0;
	input_1_64 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	input_2_64 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	mantissa1_1 <= `BSV_ASSIGNMENT_DELAY 53'd0;
	mantissa2_1 <= `BSV_ASSIGNMENT_DELAY 53'd0;
	mantissa_1_53_64 <= `BSV_ASSIGNMENT_DELAY 53'd0;
	mantissa_1_64 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	mantissa_2_53_64 <= `BSV_ASSIGNMENT_DELAY 53'd0;
	mantissa_2_64 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	sign1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign2_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign2_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_1_64 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_2_64 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_64 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_64_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_64_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_64_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sum_64 <= `BSV_ASSIGNMENT_DELAY 54'd0;
	sum_64_2 <= `BSV_ASSIGNMENT_DELAY 54'd0;
	sum_64_3 <= `BSV_ASSIGNMENT_DELAY 52'd0;
	sum_64_4 <= `BSV_ASSIGNMENT_DELAY 54'd0;
      end
    else
      begin
        if (exponent1$EN) exponent1 <= `BSV_ASSIGNMENT_DELAY exponent1$D_IN;
	if (exponent2$EN) exponent2 <= `BSV_ASSIGNMENT_DELAY exponent2$D_IN;
	if (exponent3$EN) exponent3 <= `BSV_ASSIGNMENT_DELAY exponent3$D_IN;
	if (exponent4$EN) exponent4 <= `BSV_ASSIGNMENT_DELAY exponent4$D_IN;
	if (exponent_1_64$EN)
	  exponent_1_64 <= `BSV_ASSIGNMENT_DELAY exponent_1_64$D_IN;
	if (exponent_2_64$EN)
	  exponent_2_64 <= `BSV_ASSIGNMENT_DELAY exponent_2_64$D_IN;
	if (exponent_max_64$EN)
	  exponent_max_64 <= `BSV_ASSIGNMENT_DELAY exponent_max_64$D_IN;
	if (final_sum_64$EN)
	  final_sum_64 <= `BSV_ASSIGNMENT_DELAY final_sum_64$D_IN;
	if (got_A$EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A$D_IN;
	if (got_B$EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B$D_IN;
	if (got_final$EN) got_final <= `BSV_ASSIGNMENT_DELAY got_final$D_IN;
	if (input_1_64$EN)
	  input_1_64 <= `BSV_ASSIGNMENT_DELAY input_1_64$D_IN;
	if (input_2_64$EN)
	  input_2_64 <= `BSV_ASSIGNMENT_DELAY input_2_64$D_IN;
	if (mantissa1_1$EN)
	  mantissa1_1 <= `BSV_ASSIGNMENT_DELAY mantissa1_1$D_IN;
	if (mantissa2_1$EN)
	  mantissa2_1 <= `BSV_ASSIGNMENT_DELAY mantissa2_1$D_IN;
	if (mantissa_1_53_64$EN)
	  mantissa_1_53_64 <= `BSV_ASSIGNMENT_DELAY mantissa_1_53_64$D_IN;
	if (mantissa_1_64$EN)
	  mantissa_1_64 <= `BSV_ASSIGNMENT_DELAY mantissa_1_64$D_IN;
	if (mantissa_2_53_64$EN)
	  mantissa_2_53_64 <= `BSV_ASSIGNMENT_DELAY mantissa_2_53_64$D_IN;
	if (mantissa_2_64$EN)
	  mantissa_2_64 <= `BSV_ASSIGNMENT_DELAY mantissa_2_64$D_IN;
	if (sign1_1$EN) sign1_1 <= `BSV_ASSIGNMENT_DELAY sign1_1$D_IN;
	if (sign1_2$EN) sign1_2 <= `BSV_ASSIGNMENT_DELAY sign1_2$D_IN;
	if (sign2_1$EN) sign2_1 <= `BSV_ASSIGNMENT_DELAY sign2_1$D_IN;
	if (sign2_2$EN) sign2_2 <= `BSV_ASSIGNMENT_DELAY sign2_2$D_IN;
	if (sign_1_64$EN) sign_1_64 <= `BSV_ASSIGNMENT_DELAY sign_1_64$D_IN;
	if (sign_2_64$EN) sign_2_64 <= `BSV_ASSIGNMENT_DELAY sign_2_64$D_IN;
	if (sign_64$EN) sign_64 <= `BSV_ASSIGNMENT_DELAY sign_64$D_IN;
	if (sign_64_2$EN) sign_64_2 <= `BSV_ASSIGNMENT_DELAY sign_64_2$D_IN;
	if (sign_64_3$EN) sign_64_3 <= `BSV_ASSIGNMENT_DELAY sign_64_3$D_IN;
	if (sign_64_4$EN) sign_64_4 <= `BSV_ASSIGNMENT_DELAY sign_64_4$D_IN;
	if (stage1$EN) stage1 <= `BSV_ASSIGNMENT_DELAY stage1$D_IN;
	if (stage2$EN) stage2 <= `BSV_ASSIGNMENT_DELAY stage2$D_IN;
	if (stage3$EN) stage3 <= `BSV_ASSIGNMENT_DELAY stage3$D_IN;
	if (stage4$EN) stage4 <= `BSV_ASSIGNMENT_DELAY stage4$D_IN;
	if (sum_64$EN) sum_64 <= `BSV_ASSIGNMENT_DELAY sum_64$D_IN;
	if (sum_64_2$EN) sum_64_2 <= `BSV_ASSIGNMENT_DELAY sum_64_2$D_IN;
	if (sum_64_3$EN) sum_64_3 <= `BSV_ASSIGNMENT_DELAY sum_64_3$D_IN;
	if (sum_64_4$EN) sum_64_4 <= `BSV_ASSIGNMENT_DELAY sum_64_4$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    exponent1 = 11'h2AA;
    exponent2 = 11'h2AA;
    exponent3 = 11'h2AA;
    exponent4 = 11'h2AA;
    exponent_1_64 = 11'h2AA;
    exponent_2_64 = 11'h2AA;
    exponent_max_64 = 11'h2AA;
    final_sum_64 = 64'hAAAAAAAAAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    got_final = 1'h0;
    input_1_64 = 64'hAAAAAAAAAAAAAAAA;
    input_2_64 = 64'hAAAAAAAAAAAAAAAA;
    mantissa1_1 = 53'h0AAAAAAAAAAAAA;
    mantissa2_1 = 53'h0AAAAAAAAAAAAA;
    mantissa_1_53_64 = 53'h0AAAAAAAAAAAAA;
    mantissa_1_64 = 52'hAAAAAAAAAAAAA;
    mantissa_2_53_64 = 53'h0AAAAAAAAAAAAA;
    mantissa_2_64 = 52'hAAAAAAAAAAAAA;
    sign1_1 = 1'h0;
    sign1_2 = 1'h0;
    sign2_1 = 1'h0;
    sign2_2 = 1'h0;
    sign_1_64 = 1'h0;
    sign_2_64 = 1'h0;
    sign_64 = 1'h0;
    sign_64_2 = 1'h0;
    sign_64_3 = 1'h0;
    sign_64_4 = 1'h0;
    stage1 = 1'h0;
    stage2 = 1'h0;
    stage3 = 1'h0;
    stage4 = 1'h0;
    sum_64 = 54'h2AAAAAAAAAAAAA;
    sum_64_2 = 54'h2AAAAAAAAAAAAA;
    sum_64_3 = 52'hAAAAAAAAAAAAA;
    sum_64_4 = 54'h2AAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFPAdder64

